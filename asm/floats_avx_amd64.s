//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·___mm256_mul_const_add_to(SB), $0-32

    MOVQ a+0(FP), DI
    MOVQ b+8(FP), SI
    MOVQ c+16(FP), DX
    MOVQ n+24(FP), CX

    LONG $0x07418d4c             // lea    r8, [rcx + 7]
    WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
    LONG $0xc1490f4c             // cmovns    r8, rcx
    WORD $0x894c; BYTE $0xc0     // mov    rax, r8
    LONG $0x03f8c148             // sar    rax, 3
    LONG $0xf8e08349             // and    r8, -8
    WORD $0x294c; BYTE $0xc1     // sub    rcx, r8
    WORD $0xc085                 // test    eax, eax
	JLE LBB0_6
    WORD $0xf883; BYTE $0x01     // cmp    eax, 1
	JE LBB0_4
    WORD $0x8941; BYTE $0xc0     // mov    r8d, eax
    LONG $0xfee08341             // and    r8d, -2
LBB0_3:
    LONG $0x0710fcc5             // vmovups    ymm0, yword [rdi]
    LONG $0x187de2c4; BYTE $0x0e // vbroadcastss    ymm1, dword [rsi]
    LONG $0xa87de2c4; BYTE $0x0a // vfmadd213ps    ymm1, ymm0, yword [rdx]
    LONG $0x0a11fcc5             // vmovups    yword [rdx], ymm1
    LONG $0x4710fcc5; BYTE $0x20 // vmovups    ymm0, yword [rdi + 32]
    LONG $0x187de2c4; BYTE $0x0e // vbroadcastss    ymm1, dword [rsi]
    LONG $0xa87de2c4; WORD $0x204a // vfmadd213ps    ymm1, ymm0, yword [rdx + 32]
    LONG $0x4a11fcc5; BYTE $0x20 // vmovups    yword [rdx + 32], ymm1
    LONG $0x40c78348             // add    rdi, 64
    LONG $0x40c28348             // add    rdx, 64
    LONG $0xfec08341             // add    r8d, -2
	JNE LBB0_3
LBB0_4:
    WORD $0x01a8                 // test    al, 1
	JE LBB0_6
    LONG $0x0710fcc5             // vmovups    ymm0, yword [rdi]
    LONG $0x187de2c4; BYTE $0x0e // vbroadcastss    ymm1, dword [rsi]
    LONG $0xa87de2c4; BYTE $0x0a // vfmadd213ps    ymm1, ymm0, yword [rdx]
    LONG $0x0a11fcc5             // vmovups    yword [rdx], ymm1
    LONG $0x20c78348             // add    rdi, 32
    LONG $0x20c28348             // add    rdx, 32
LBB0_6:
    WORD $0xc985                 // test    ecx, ecx
	JLE LBB0_18
    WORD $0xc889                 // mov    eax, ecx
    LONG $0x20f88348             // cmp    rax, 32
	JAE LBB0_9
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
	JMP LBB0_14
LBB0_9:
    LONG $0x82048d4c             // lea    r8, [rdx + 4*rax]
    LONG $0x870c8d4c             // lea    r9, [rdi + 4*rax]
    LONG $0x04568d4c             // lea    r10, [rsi + 4]
    WORD $0x394c; BYTE $0xca     // cmp    rdx, r9
    LONG $0xd3920f41             // setb    r11b
    WORD $0x394c; BYTE $0xc7     // cmp    rdi, r8
    WORD $0x920f; BYTE $0xd3     // setb    bl
    WORD $0x394c; BYTE $0xd2     // cmp    rdx, r10
    LONG $0xd1920f41             // setb    r9b
    WORD $0x3949; BYTE $0xf0     // cmp    r8, rsi
    LONG $0xd2970f41             // seta    r10b
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
    WORD $0x8441; BYTE $0xdb     // test    r11b, bl
	JNE LBB0_14
    WORD $0x2045; BYTE $0xd1     // and    r9b, r10b
	JNE LBB0_14
    WORD $0x8941; BYTE $0xc9     // mov    r9d, ecx
    LONG $0x1fe18341             // and    r9d, 31
    WORD $0x8949; BYTE $0xc0     // mov    r8, rax
    WORD $0x294d; BYTE $0xc8     // sub    r8, r9
    LONG $0x187de2c4; BYTE $0x06 // vbroadcastss    ymm0, dword [rsi]
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
LBB0_12:
    LONG $0x107ca1c4; WORD $0x970c // vmovups    ymm1, yword [rdi + 4*r10]
    LONG $0x107ca1c4; WORD $0x9754; BYTE $0x20 // vmovups    ymm2, yword [rdi + 4*r10 + 32]
    LONG $0x107ca1c4; WORD $0x975c; BYTE $0x40 // vmovups    ymm3, yword [rdi + 4*r10 + 64]
    LONG $0x107ca1c4; WORD $0x9764; BYTE $0x60 // vmovups    ymm4, yword [rdi + 4*r10 + 96]
    LONG $0xa87da2c4; WORD $0x920c // vfmadd213ps    ymm1, ymm0, yword [rdx + 4*r10]
    LONG $0xa87da2c4; WORD $0x9254; BYTE $0x20 // vfmadd213ps    ymm2, ymm0, yword [rdx + 4*r10 + 32]
    LONG $0xa87da2c4; WORD $0x925c; BYTE $0x40 // vfmadd213ps    ymm3, ymm0, yword [rdx + 4*r10 + 64]
    LONG $0xa87da2c4; WORD $0x9264; BYTE $0x60 // vfmadd213ps    ymm4, ymm0, yword [rdx + 4*r10 + 96]
    LONG $0x117ca1c4; WORD $0x920c // vmovups    yword [rdx + 4*r10], ymm1
    LONG $0x117ca1c4; WORD $0x9254; BYTE $0x20 // vmovups    yword [rdx + 4*r10 + 32], ymm2
    LONG $0x117ca1c4; WORD $0x925c; BYTE $0x40 // vmovups    yword [rdx + 4*r10 + 64], ymm3
    LONG $0x117ca1c4; WORD $0x9264; BYTE $0x60 // vmovups    yword [rdx + 4*r10 + 96], ymm4
    LONG $0x20c28349             // add    r10, 32
    WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE LBB0_12
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE LBB0_18
LBB0_14:
    WORD $0x2944; BYTE $0xc1     // sub    ecx, r8d
    LONG $0x01488d4d             // lea    r9, [r8 + 1]
    WORD $0xc1f6; BYTE $0x01     // test    cl, 1
	JE LBB0_16
    LONG $0x107aa1c4; WORD $0x8704 // vmovss    xmm0, dword [rdi + 4*r8]
    LONG $0x0e10fac5             // vmovss    xmm1, dword [rsi]
    LONG $0xa979a2c4; WORD $0x820c // vfmadd213ss    xmm1, xmm0, dword [rdx + 4*r8]
    LONG $0x117aa1c4; WORD $0x820c // vmovss    dword [rdx + 4*r8], xmm1
    WORD $0x894d; BYTE $0xc8     // mov    r8, r9
LBB0_16:
    WORD $0x394c; BYTE $0xc8     // cmp    rax, r9
	JE LBB0_18
LBB0_17:
    LONG $0x107aa1c4; WORD $0x8704 // vmovss    xmm0, dword [rdi + 4*r8]
    LONG $0x0e10fac5             // vmovss    xmm1, dword [rsi]
    LONG $0xa979a2c4; WORD $0x820c // vfmadd213ss    xmm1, xmm0, dword [rdx + 4*r8]
    LONG $0x117aa1c4; WORD $0x820c // vmovss    dword [rdx + 4*r8], xmm1
    LONG $0x107aa1c4; WORD $0x8744; BYTE $0x04 // vmovss    xmm0, dword [rdi + 4*r8 + 4]
    LONG $0x0e10fac5             // vmovss    xmm1, dword [rsi]
    LONG $0xa979a2c4; WORD $0x824c; BYTE $0x04 // vfmadd213ss    xmm1, xmm0, dword [rdx + 4*r8 + 4]
    LONG $0x117aa1c4; WORD $0x824c; BYTE $0x04 // vmovss    dword [rdx + 4*r8 + 4], xmm1
    LONG $0x02c08349             // add    r8, 2
    WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	JNE LBB0_17
LBB0_18:
    VZEROUPPER
    RET




TEXT ·___mm256_mul_const_to(SB), $0-32

    MOVQ a+0(FP), DI
    MOVQ b+8(FP), SI
    MOVQ c+16(FP), DX
    MOVQ n+24(FP), CX

    LONG $0x07418d4c             // lea    r8, [rcx + 7]
    WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
    LONG $0xc1490f4c             // cmovns    r8, rcx
    WORD $0x894c; BYTE $0xc0     // mov    rax, r8
    LONG $0x03f8c148             // sar    rax, 3
    LONG $0xf8e08349             // and    r8, -8
    WORD $0x294c; BYTE $0xc1     // sub    rcx, r8
    WORD $0xc085                 // test    eax, eax
	JLE LBB1_6
    WORD $0xf883; BYTE $0x01     // cmp    eax, 1
	JE LBB1_4
    WORD $0x8941; BYTE $0xc0     // mov    r8d, eax
    LONG $0xfee08341             // and    r8d, -2
LBB1_3:
    LONG $0x187de2c4; BYTE $0x06 // vbroadcastss    ymm0, dword [rsi]
    LONG $0x0759fcc5             // vmulps    ymm0, ymm0, yword [rdi]
    LONG $0x0211fcc5             // vmovups    yword [rdx], ymm0
    LONG $0x187de2c4; BYTE $0x06 // vbroadcastss    ymm0, dword [rsi]
    LONG $0x4759fcc5; BYTE $0x20 // vmulps    ymm0, ymm0, yword [rdi + 32]
    LONG $0x4211fcc5; BYTE $0x20 // vmovups    yword [rdx + 32], ymm0
    LONG $0x40c78348             // add    rdi, 64
    LONG $0x40c28348             // add    rdx, 64
    LONG $0xfec08341             // add    r8d, -2
	JNE LBB1_3
LBB1_4:
    WORD $0x01a8                 // test    al, 1
	JE LBB1_6
    LONG $0x187de2c4; BYTE $0x06 // vbroadcastss    ymm0, dword [rsi]
    LONG $0x0759fcc5             // vmulps    ymm0, ymm0, yword [rdi]
    LONG $0x0211fcc5             // vmovups    yword [rdx], ymm0
    LONG $0x20c78348             // add    rdi, 32
    LONG $0x20c28348             // add    rdx, 32
LBB1_6:
    WORD $0xc985                 // test    ecx, ecx
	JLE LBB1_18
    WORD $0xc889                 // mov    eax, ecx
    LONG $0x20f88348             // cmp    rax, 32
	JAE LBB1_9
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
	JMP LBB1_14
LBB1_9:
    LONG $0x82048d4c             // lea    r8, [rdx + 4*rax]
    LONG $0x870c8d4c             // lea    r9, [rdi + 4*rax]
    LONG $0x04568d4c             // lea    r10, [rsi + 4]
    WORD $0x394c; BYTE $0xca     // cmp    rdx, r9
    LONG $0xd3920f41             // setb    r11b
    WORD $0x394c; BYTE $0xc7     // cmp    rdi, r8
    WORD $0x920f; BYTE $0xd3     // setb    bl
    WORD $0x394c; BYTE $0xd2     // cmp    rdx, r10
    LONG $0xd1920f41             // setb    r9b
    WORD $0x3949; BYTE $0xf0     // cmp    r8, rsi
    LONG $0xd2970f41             // seta    r10b
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
    WORD $0x8441; BYTE $0xdb     // test    r11b, bl
	JNE LBB1_14
    WORD $0x2045; BYTE $0xd1     // and    r9b, r10b
	JNE LBB1_14
    WORD $0x8941; BYTE $0xc9     // mov    r9d, ecx
    LONG $0x1fe18341             // and    r9d, 31
    WORD $0x8949; BYTE $0xc0     // mov    r8, rax
    WORD $0x294d; BYTE $0xc8     // sub    r8, r9
    LONG $0x187de2c4; BYTE $0x06 // vbroadcastss    ymm0, dword [rsi]
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
LBB1_12:
    LONG $0x597ca1c4; WORD $0x970c // vmulps    ymm1, ymm0, yword [rdi + 4*r10]
    LONG $0x597ca1c4; WORD $0x9754; BYTE $0x20 // vmulps    ymm2, ymm0, yword [rdi + 4*r10 + 32]
    LONG $0x597ca1c4; WORD $0x975c; BYTE $0x40 // vmulps    ymm3, ymm0, yword [rdi + 4*r10 + 64]
    LONG $0x597ca1c4; WORD $0x9764; BYTE $0x60 // vmulps    ymm4, ymm0, yword [rdi + 4*r10 + 96]
    LONG $0x117ca1c4; WORD $0x920c // vmovups    yword [rdx + 4*r10], ymm1
    LONG $0x117ca1c4; WORD $0x9254; BYTE $0x20 // vmovups    yword [rdx + 4*r10 + 32], ymm2
    LONG $0x117ca1c4; WORD $0x925c; BYTE $0x40 // vmovups    yword [rdx + 4*r10 + 64], ymm3
    LONG $0x117ca1c4; WORD $0x9264; BYTE $0x60 // vmovups    yword [rdx + 4*r10 + 96], ymm4
    LONG $0x20c28349             // add    r10, 32
    WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE LBB1_12
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE LBB1_18
LBB1_14:
    WORD $0x2944; BYTE $0xc1     // sub    ecx, r8d
    WORD $0x894d; BYTE $0xc1     // mov    r9, r8
    WORD $0xf749; BYTE $0xd1     // not    r9
    WORD $0x0149; BYTE $0xc1     // add    r9, rax
    LONG $0x03e18348             // and    rcx, 3
	JE LBB1_16
LBB1_15:
    LONG $0x0610fac5             // vmovss    xmm0, dword [rsi]
    LONG $0x597aa1c4; WORD $0x8704 // vmulss    xmm0, xmm0, dword [rdi + 4*r8]
    LONG $0x117aa1c4; WORD $0x8204 // vmovss    dword [rdx + 4*r8], xmm0
    WORD $0xff49; BYTE $0xc0     // inc    r8
    WORD $0xff48; BYTE $0xc9     // dec    rcx
	JNE LBB1_15
LBB1_16:
    LONG $0x03f98349             // cmp    r9, 3
	JB LBB1_18
LBB1_17:
    LONG $0x0610fac5             // vmovss    xmm0, dword [rsi]
    LONG $0x597aa1c4; WORD $0x8704 // vmulss    xmm0, xmm0, dword [rdi + 4*r8]
    LONG $0x117aa1c4; WORD $0x8204 // vmovss    dword [rdx + 4*r8], xmm0
    LONG $0x0610fac5             // vmovss    xmm0, dword [rsi]
    LONG $0x597aa1c4; WORD $0x8744; BYTE $0x04 // vmulss    xmm0, xmm0, dword [rdi + 4*r8 + 4]
    LONG $0x117aa1c4; WORD $0x8244; BYTE $0x04 // vmovss    dword [rdx + 4*r8 + 4], xmm0
    LONG $0x0610fac5             // vmovss    xmm0, dword [rsi]
    LONG $0x597aa1c4; WORD $0x8744; BYTE $0x08 // vmulss    xmm0, xmm0, dword [rdi + 4*r8 + 8]
    LONG $0x117aa1c4; WORD $0x8244; BYTE $0x08 // vmovss    dword [rdx + 4*r8 + 8], xmm0
    LONG $0x0610fac5             // vmovss    xmm0, dword [rsi]
    LONG $0x597aa1c4; WORD $0x8744; BYTE $0x0c // vmulss    xmm0, xmm0, dword [rdi + 4*r8 + 12]
    LONG $0x117aa1c4; WORD $0x8244; BYTE $0x0c // vmovss    dword [rdx + 4*r8 + 12], xmm0
    LONG $0x04c08349             // add    r8, 4
    WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	JNE LBB1_17
LBB1_18:
    VZEROUPPER
    RET




TEXT ·___mm256_mul_const(SB), $0-24

    MOVQ a+0(FP), DI
    MOVQ b+8(FP), SI
    MOVQ n+16(FP), DX

    LONG $0x074a8d48             // lea    rcx, [rdx + 7]
    WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
    LONG $0xca490f48             // cmovns    rcx, rdx
    WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
    LONG $0x03f8c148             // sar    rax, 3
    LONG $0xf8e18348             // and    rcx, -8
    WORD $0x2948; BYTE $0xca     // sub    rdx, rcx
    WORD $0xc085                 // test    eax, eax
	JLE LBB2_6
    WORD $0xf883; BYTE $0x01     // cmp    eax, 1
	JE LBB2_4
    WORD $0xc189                 // mov    ecx, eax
    WORD $0xe183; BYTE $0xfe     // and    ecx, -2
LBB2_3:
    LONG $0x187de2c4; BYTE $0x06 // vbroadcastss    ymm0, dword [rsi]
    LONG $0x0759fcc5             // vmulps    ymm0, ymm0, yword [rdi]
    LONG $0x0711fcc5             // vmovups    yword [rdi], ymm0
    LONG $0x187de2c4; BYTE $0x06 // vbroadcastss    ymm0, dword [rsi]
    LONG $0x4759fcc5; BYTE $0x20 // vmulps    ymm0, ymm0, yword [rdi + 32]
    LONG $0x4711fcc5; BYTE $0x20 // vmovups    yword [rdi + 32], ymm0
    LONG $0x40c78348             // add    rdi, 64
    WORD $0xc183; BYTE $0xfe     // add    ecx, -2
	JNE LBB2_3
LBB2_4:
    WORD $0x01a8                 // test    al, 1
	JE LBB2_6
    LONG $0x187de2c4; BYTE $0x06 // vbroadcastss    ymm0, dword [rsi]
    LONG $0x0759fcc5             // vmulps    ymm0, ymm0, yword [rdi]
    LONG $0x0711fcc5             // vmovups    yword [rdi], ymm0
    LONG $0x20c78348             // add    rdi, 32
LBB2_6:
    WORD $0xd285                 // test    edx, edx
	JLE LBB2_19
    WORD $0xd089                 // mov    eax, edx
    LONG $0x20f88348             // cmp    rax, 32
	JB LBB2_8
    LONG $0x044e8d48             // lea    rcx, [rsi + 4]
    WORD $0x3948; BYTE $0xcf     // cmp    rdi, rcx
	JAE LBB2_12
    LONG $0x870c8d48             // lea    rcx, [rdi + 4*rax]
    WORD $0x3948; BYTE $0xf1     // cmp    rcx, rsi
	JBE LBB2_12
LBB2_8:
    WORD $0xc931                 // xor    ecx, ecx
LBB2_15:
    WORD $0xca29                 // sub    edx, ecx
    WORD $0x8949; BYTE $0xc8     // mov    r8, rcx
    WORD $0xf749; BYTE $0xd0     // not    r8
    WORD $0x0149; BYTE $0xc0     // add    r8, rax
    LONG $0x03e28348             // and    rdx, 3
	JE LBB2_17
LBB2_16:
    LONG $0x0410fac5; BYTE $0x8f // vmovss    xmm0, dword [rdi + 4*rcx]
    LONG $0x0659fac5             // vmulss    xmm0, xmm0, dword [rsi]
    LONG $0x0411fac5; BYTE $0x8f // vmovss    dword [rdi + 4*rcx], xmm0
    WORD $0xff48; BYTE $0xc1     // inc    rcx
    WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE LBB2_16
LBB2_17:
    LONG $0x03f88349             // cmp    r8, 3
	JB LBB2_19
LBB2_18:
    LONG $0x0410fac5; BYTE $0x8f // vmovss    xmm0, dword [rdi + 4*rcx]
    LONG $0x0659fac5             // vmulss    xmm0, xmm0, dword [rsi]
    LONG $0x4c10fac5; WORD $0x048f // vmovss    xmm1, dword [rdi + 4*rcx + 4]
    LONG $0x0411fac5; BYTE $0x8f // vmovss    dword [rdi + 4*rcx], xmm0
    LONG $0x0659f2c5             // vmulss    xmm0, xmm1, dword [rsi]
    LONG $0x4411fac5; WORD $0x048f // vmovss    dword [rdi + 4*rcx + 4], xmm0
    LONG $0x4410fac5; WORD $0x088f // vmovss    xmm0, dword [rdi + 4*rcx + 8]
    LONG $0x0659fac5             // vmulss    xmm0, xmm0, dword [rsi]
    LONG $0x4411fac5; WORD $0x088f // vmovss    dword [rdi + 4*rcx + 8], xmm0
    LONG $0x4410fac5; WORD $0x0c8f // vmovss    xmm0, dword [rdi + 4*rcx + 12]
    LONG $0x0659fac5             // vmulss    xmm0, xmm0, dword [rsi]
    LONG $0x4411fac5; WORD $0x0c8f // vmovss    dword [rdi + 4*rcx + 12], xmm0
    LONG $0x04c18348             // add    rcx, 4
    WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE LBB2_18
	JMP LBB2_19
LBB2_12:
    WORD $0x8941; BYTE $0xd0     // mov    r8d, edx
    LONG $0x1fe08341             // and    r8d, 31
    WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
    WORD $0x294c; BYTE $0xc1     // sub    rcx, r8
    LONG $0x187de2c4; BYTE $0x06 // vbroadcastss    ymm0, dword [rsi]
    WORD $0x3145; BYTE $0xc9     // xor    r9d, r9d
LBB2_13:
    LONG $0x597ca1c4; WORD $0x8f0c // vmulps    ymm1, ymm0, yword [rdi + 4*r9]
    LONG $0x597ca1c4; WORD $0x8f54; BYTE $0x20 // vmulps    ymm2, ymm0, yword [rdi + 4*r9 + 32]
    LONG $0x597ca1c4; WORD $0x8f5c; BYTE $0x40 // vmulps    ymm3, ymm0, yword [rdi + 4*r9 + 64]
    LONG $0x597ca1c4; WORD $0x8f64; BYTE $0x60 // vmulps    ymm4, ymm0, yword [rdi + 4*r9 + 96]
    LONG $0x117ca1c4; WORD $0x8f0c // vmovups    yword [rdi + 4*r9], ymm1
    LONG $0x117ca1c4; WORD $0x8f54; BYTE $0x20 // vmovups    yword [rdi + 4*r9 + 32], ymm2
    LONG $0x117ca1c4; WORD $0x8f5c; BYTE $0x40 // vmovups    yword [rdi + 4*r9 + 64], ymm3
    LONG $0x117ca1c4; WORD $0x8f64; BYTE $0x60 // vmovups    yword [rdi + 4*r9 + 96], ymm4
    LONG $0x20c18349             // add    r9, 32
    WORD $0x394c; BYTE $0xc9     // cmp    rcx, r9
	JNE LBB2_13
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JNE LBB2_15
LBB2_19:
    VZEROUPPER
    RET




TEXT ·___mm256_mul_to(SB), $0-32

    MOVQ a+0(FP), DI
    MOVQ b+8(FP), SI
    MOVQ c+16(FP), DX
    MOVQ n+24(FP), CX

    LONG $0x07418d48             // lea    rax, [rcx + 7]
    WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
    LONG $0xc1490f48             // cmovns    rax, rcx
    WORD $0x8949; BYTE $0xc0     // mov    r8, rax
    LONG $0x03f8c149             // sar    r8, 3
    LONG $0xf8e08348             // and    rax, -8
    WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
    WORD $0x8545; BYTE $0xc0     // test    r8d, r8d
	JLE LBB3_6
    WORD $0x8944; BYTE $0xc0     // mov    eax, r8d
    WORD $0xe083; BYTE $0x03     // and    eax, 3
    LONG $0x04f88341             // cmp    r8d, 4
	JB LBB3_4
    LONG $0xfce08341             // and    r8d, -4
LBB3_3:
    LONG $0x0610fcc5             // vmovups    ymm0, yword [rsi]
    LONG $0x0759fcc5             // vmulps    ymm0, ymm0, yword [rdi]
    LONG $0x0211fcc5             // vmovups    yword [rdx], ymm0
    LONG $0x4610fcc5; BYTE $0x20 // vmovups    ymm0, yword [rsi + 32]
    LONG $0x4759fcc5; BYTE $0x20 // vmulps    ymm0, ymm0, yword [rdi + 32]
    LONG $0x4211fcc5; BYTE $0x20 // vmovups    yword [rdx + 32], ymm0
    LONG $0x4610fcc5; BYTE $0x40 // vmovups    ymm0, yword [rsi + 64]
    LONG $0x4759fcc5; BYTE $0x40 // vmulps    ymm0, ymm0, yword [rdi + 64]
    LONG $0x4211fcc5; BYTE $0x40 // vmovups    yword [rdx + 64], ymm0
    LONG $0x4610fcc5; BYTE $0x60 // vmovups    ymm0, yword [rsi + 96]
    LONG $0x4759fcc5; BYTE $0x60 // vmulps    ymm0, ymm0, yword [rdi + 96]
    LONG $0x4211fcc5; BYTE $0x60 // vmovups    yword [rdx + 96], ymm0
    LONG $0x80ef8348             // sub    rdi, -128
    LONG $0x80ee8348             // sub    rsi, -128
    LONG $0x80ea8348             // sub    rdx, -128
    LONG $0xfcc08341             // add    r8d, -4
	JNE LBB3_3
LBB3_4:
    WORD $0xc085                 // test    eax, eax
	JE LBB3_6
LBB3_5:
    LONG $0x0610fcc5             // vmovups    ymm0, yword [rsi]
    LONG $0x0759fcc5             // vmulps    ymm0, ymm0, yword [rdi]
    LONG $0x0211fcc5             // vmovups    yword [rdx], ymm0
    LONG $0x20c78348             // add    rdi, 32
    LONG $0x20c68348             // add    rsi, 32
    LONG $0x20c28348             // add    rdx, 32
    WORD $0xc8ff                 // dec    eax
	JNE LBB3_5
LBB3_6:
    WORD $0xc985                 // test    ecx, ecx
	JLE LBB3_18
    WORD $0xc889                 // mov    eax, ecx
    LONG $0x20f88348             // cmp    rax, 32
	JAE LBB3_9
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
	JMP LBB3_14
LBB3_9:
    WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
    WORD $0x2949; BYTE $0xf9     // sub    r9, rdi
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
    LONG $0x80f98149; WORD $0x0000; BYTE $0x00 // cmp    r9, 128
	JB LBB3_14
    WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
    WORD $0x2949; BYTE $0xf1     // sub    r9, rsi
    LONG $0x80f98149; WORD $0x0000; BYTE $0x00 // cmp    r9, 128
	JB LBB3_14
    WORD $0x8941; BYTE $0xc9     // mov    r9d, ecx
    LONG $0x1fe18341             // and    r9d, 31
    WORD $0x8949; BYTE $0xc0     // mov    r8, rax
    WORD $0x294d; BYTE $0xc8     // sub    r8, r9
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
LBB3_12:
    LONG $0x107ca1c4; WORD $0x9604 // vmovups    ymm0, yword [rsi + 4*r10]
    LONG $0x107ca1c4; WORD $0x964c; BYTE $0x20 // vmovups    ymm1, yword [rsi + 4*r10 + 32]
    LONG $0x107ca1c4; WORD $0x9654; BYTE $0x40 // vmovups    ymm2, yword [rsi + 4*r10 + 64]
    LONG $0x107ca1c4; WORD $0x965c; BYTE $0x60 // vmovups    ymm3, yword [rsi + 4*r10 + 96]
    LONG $0x597ca1c4; WORD $0x9704 // vmulps    ymm0, ymm0, yword [rdi + 4*r10]
    LONG $0x5974a1c4; WORD $0x974c; BYTE $0x20 // vmulps    ymm1, ymm1, yword [rdi + 4*r10 + 32]
    LONG $0x596ca1c4; WORD $0x9754; BYTE $0x40 // vmulps    ymm2, ymm2, yword [rdi + 4*r10 + 64]
    LONG $0x5964a1c4; WORD $0x975c; BYTE $0x60 // vmulps    ymm3, ymm3, yword [rdi + 4*r10 + 96]
    LONG $0x117ca1c4; WORD $0x9204 // vmovups    yword [rdx + 4*r10], ymm0
    LONG $0x117ca1c4; WORD $0x924c; BYTE $0x20 // vmovups    yword [rdx + 4*r10 + 32], ymm1
    LONG $0x117ca1c4; WORD $0x9254; BYTE $0x40 // vmovups    yword [rdx + 4*r10 + 64], ymm2
    LONG $0x117ca1c4; WORD $0x925c; BYTE $0x60 // vmovups    yword [rdx + 4*r10 + 96], ymm3
    LONG $0x20c28349             // add    r10, 32
    WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE LBB3_12
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE LBB3_18
LBB3_14:
    WORD $0x2944; BYTE $0xc1     // sub    ecx, r8d
    WORD $0x894d; BYTE $0xc1     // mov    r9, r8
    WORD $0xf749; BYTE $0xd1     // not    r9
    WORD $0x0149; BYTE $0xc1     // add    r9, rax
    LONG $0x03e18348             // and    rcx, 3
	JE LBB3_16
LBB3_15:
    LONG $0x107aa1c4; WORD $0x8604 // vmovss    xmm0, dword [rsi + 4*r8]
    LONG $0x597aa1c4; WORD $0x8704 // vmulss    xmm0, xmm0, dword [rdi + 4*r8]
    LONG $0x117aa1c4; WORD $0x8204 // vmovss    dword [rdx + 4*r8], xmm0
    WORD $0xff49; BYTE $0xc0     // inc    r8
    WORD $0xff48; BYTE $0xc9     // dec    rcx
	JNE LBB3_15
LBB3_16:
    LONG $0x03f98349             // cmp    r9, 3
	JB LBB3_18
LBB3_17:
    LONG $0x107aa1c4; WORD $0x8604 // vmovss    xmm0, dword [rsi + 4*r8]
    LONG $0x597aa1c4; WORD $0x8704 // vmulss    xmm0, xmm0, dword [rdi + 4*r8]
    LONG $0x117aa1c4; WORD $0x8204 // vmovss    dword [rdx + 4*r8], xmm0
    LONG $0x107aa1c4; WORD $0x8644; BYTE $0x04 // vmovss    xmm0, dword [rsi + 4*r8 + 4]
    LONG $0x597aa1c4; WORD $0x8744; BYTE $0x04 // vmulss    xmm0, xmm0, dword [rdi + 4*r8 + 4]
    LONG $0x117aa1c4; WORD $0x8244; BYTE $0x04 // vmovss    dword [rdx + 4*r8 + 4], xmm0
    LONG $0x107aa1c4; WORD $0x8644; BYTE $0x08 // vmovss    xmm0, dword [rsi + 4*r8 + 8]
    LONG $0x597aa1c4; WORD $0x8744; BYTE $0x08 // vmulss    xmm0, xmm0, dword [rdi + 4*r8 + 8]
    LONG $0x117aa1c4; WORD $0x8244; BYTE $0x08 // vmovss    dword [rdx + 4*r8 + 8], xmm0
    LONG $0x107aa1c4; WORD $0x8644; BYTE $0x0c // vmovss    xmm0, dword [rsi + 4*r8 + 12]
    LONG $0x597aa1c4; WORD $0x8744; BYTE $0x0c // vmulss    xmm0, xmm0, dword [rdi + 4*r8 + 12]
    LONG $0x117aa1c4; WORD $0x8244; BYTE $0x0c // vmovss    dword [rdx + 4*r8 + 12], xmm0
    LONG $0x04c08349             // add    r8, 4
    WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	JNE LBB3_17
LBB3_18:
    VZEROUPPER
    RET




TEXT ·___mm256_dot(SB), $0-32

    MOVQ a+0(FP), DI
    MOVQ b+8(FP), SI
    MOVQ n+16(FP), DX
    MOVQ ret+24(FP), CX

    LONG $0x07428d48             // lea    rax, [rdx + 7]
    WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
    LONG $0xc2490f48             // cmovns    rax, rdx
    WORD $0x8949; BYTE $0xc1     // mov    r9, rax
    LONG $0x03f9c149             // sar    r9, 3
    LONG $0xf8e08348             // and    rax, -8
    WORD $0x2948; BYTE $0xc2     // sub    rdx, rax
    WORD $0x8545; BYTE $0xc9     // test    r9d, r9d
	JLE LBB4_1
    LONG $0x0610fcc5             // vmovups    ymm0, yword [rsi]
    LONG $0x0759fcc5             // vmulps    ymm0, ymm0, yword [rdi]
    LONG $0x20c78348             // add    rdi, 32
    LONG $0x20c68348             // add    rsi, 32
    LONG $0x01f98341             // cmp    r9d, 1
	JE LBB4_8
    LONG $0xff418d45             // lea    r8d, [r9 - 1]
    LONG $0xfec18341             // add    r9d, -2
    WORD $0x8944; BYTE $0xc0     // mov    eax, r8d
    WORD $0xe083; BYTE $0x03     // and    eax, 3
    LONG $0x03f98341             // cmp    r9d, 3
	JB LBB4_6
    LONG $0xfce08341             // and    r8d, -4
LBB4_5:
    LONG $0x0e10fcc5             // vmovups    ymm1, yword [rsi]
    LONG $0x5610fcc5; BYTE $0x20 // vmovups    ymm2, yword [rsi + 32]
    LONG $0x5e10fcc5; BYTE $0x40 // vmovups    ymm3, yword [rsi + 64]
    LONG $0x987de2c4; BYTE $0x0f // vfmadd132ps    ymm1, ymm0, yword [rdi]
    LONG $0xb86de2c4; WORD $0x204f // vfmadd231ps    ymm1, ymm2, yword [rdi + 32]
    LONG $0xb865e2c4; WORD $0x404f // vfmadd231ps    ymm1, ymm3, yword [rdi + 64]
    LONG $0x5610fcc5; BYTE $0x60 // vmovups    ymm2, yword [rsi + 96]
    LONG $0xc128fcc5             // vmovaps    ymm0, ymm1
    LONG $0xb86de2c4; WORD $0x6047 // vfmadd231ps    ymm0, ymm2, yword [rdi + 96]
    LONG $0x80ef8348             // sub    rdi, -128
    LONG $0x80ee8348             // sub    rsi, -128
    LONG $0xfcc08341             // add    r8d, -4
	JNE LBB4_5
LBB4_6:
    WORD $0xc085                 // test    eax, eax
	JE LBB4_8
LBB4_7:
    LONG $0x0e10fcc5             // vmovups    ymm1, yword [rsi]
    LONG $0xb875e2c4; BYTE $0x07 // vfmadd231ps    ymm0, ymm1, yword [rdi]
    LONG $0x20c78348             // add    rdi, 32
    LONG $0x20c68348             // add    rsi, 32
    WORD $0xc8ff                 // dec    eax
	JNE LBB4_7
	JMP LBB4_8
LBB4_1:
LBB4_8:
    LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
    LONG $0xc058f0c5             // vaddps    xmm0, xmm1, xmm0
    LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    xmm1, xmm0, 1
    LONG $0xc058f0c5             // vaddps    xmm0, xmm1, xmm0
    LONG $0xc816fac5             // vmovshdup    xmm1, xmm0
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    WORD $0xd285                 // test    edx, edx
	JLE LBB4_20
    WORD $0xd089                 // mov    eax, edx
    LONG $0x20f88348             // cmp    rax, 32
	JAE LBB4_11
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
	JMP LBB4_16
LBB4_11:
    LONG $0x04418d4c             // lea    r8, [rcx + 4]
    LONG $0x870c8d4c             // lea    r9, [rdi + 4*rax]
    LONG $0x86148d4c             // lea    r10, [rsi + 4*rax]
    WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
    LONG $0xd3970f41             // seta    r11b
    WORD $0x394c; BYTE $0xc7     // cmp    rdi, r8
    WORD $0x920f; BYTE $0xd3     // setb    bl
    WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
    LONG $0xd1970f41             // seta    r9b
    WORD $0x394c; BYTE $0xc6     // cmp    rsi, r8
    LONG $0xd2920f41             // setb    r10b
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
    WORD $0x8441; BYTE $0xdb     // test    r11b, bl
	JNE LBB4_16
    WORD $0x2045; BYTE $0xd1     // and    r9b, r10b
	JNE LBB4_16
    WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
    LONG $0x1fe18341             // and    r9d, 31
    WORD $0x8949; BYTE $0xc0     // mov    r8, rax
    WORD $0x294d; BYTE $0xc8     // sub    r8, r9
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
    LONG $0x0c71e3c4; WORD $0x01c0 // vblendps    xmm0, xmm1, xmm0, 1
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
    LONG $0xdb57e0c5             // vxorps    xmm3, xmm3, xmm3
LBB4_14:
    LONG $0x107ca1c4; WORD $0x9624 // vmovups    ymm4, yword [rsi + 4*r10]
    LONG $0x107ca1c4; WORD $0x966c; BYTE $0x20 // vmovups    ymm5, yword [rsi + 4*r10 + 32]
    LONG $0x107ca1c4; WORD $0x9674; BYTE $0x40 // vmovups    ymm6, yword [rsi + 4*r10 + 64]
    LONG $0x107ca1c4; WORD $0x967c; BYTE $0x60 // vmovups    ymm7, yword [rsi + 4*r10 + 96]
    LONG $0xb85da2c4; WORD $0x9704 // vfmadd231ps    ymm0, ymm4, yword [rdi + 4*r10]
    LONG $0xb855a2c4; WORD $0x974c; BYTE $0x20 // vfmadd231ps    ymm1, ymm5, yword [rdi + 4*r10 + 32]
    LONG $0xb84da2c4; WORD $0x9754; BYTE $0x40 // vfmadd231ps    ymm2, ymm6, yword [rdi + 4*r10 + 64]
    LONG $0xb845a2c4; WORD $0x975c; BYTE $0x60 // vfmadd231ps    ymm3, ymm7, yword [rdi + 4*r10 + 96]
    LONG $0x20c28349             // add    r10, 32
    WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE LBB4_14
    LONG $0xc058f4c5             // vaddps    ymm0, ymm1, ymm0
    LONG $0xc058ecc5             // vaddps    ymm0, ymm2, ymm0
    LONG $0xc058e4c5             // vaddps    ymm0, ymm3, ymm0
    LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
    LONG $0xc158f8c5             // vaddps    xmm0, xmm0, xmm1
    LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    xmm1, xmm0, 1
    LONG $0xc158f8c5             // vaddps    xmm0, xmm0, xmm1
    LONG $0xc816fac5             // vmovshdup    xmm1, xmm0
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE LBB4_20
LBB4_16:
    WORD $0x2944; BYTE $0xc2     // sub    edx, r8d
    WORD $0x894d; BYTE $0xc1     // mov    r9, r8
    WORD $0xf749; BYTE $0xd1     // not    r9
    WORD $0x0149; BYTE $0xc1     // add    r9, rax
    LONG $0x03e28348             // and    rdx, 3
	JE LBB4_18
LBB4_17:
    LONG $0x107aa1c4; WORD $0x860c // vmovss    xmm1, dword [rsi + 4*r8]
    LONG $0xb971a2c4; WORD $0x8704 // vfmadd231ss    xmm0, xmm1, dword [rdi + 4*r8]
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    WORD $0xff49; BYTE $0xc0     // inc    r8
    WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE LBB4_17
LBB4_18:
    LONG $0x03f98349             // cmp    r9, 3
	JB LBB4_20
LBB4_19:
    LONG $0x107aa1c4; WORD $0x860c // vmovss    xmm1, dword [rsi + 4*r8]
    LONG $0x9979a2c4; WORD $0x870c // vfmadd132ss    xmm1, xmm0, dword [rdi + 4*r8]
    LONG $0x0911fac5             // vmovss    dword [rcx], xmm1
    LONG $0x107aa1c4; WORD $0x8644; BYTE $0x04 // vmovss    xmm0, dword [rsi + 4*r8 + 4]
    LONG $0x9971a2c4; WORD $0x8744; BYTE $0x04 // vfmadd132ss    xmm0, xmm1, dword [rdi + 4*r8 + 4]
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x107aa1c4; WORD $0x864c; BYTE $0x08 // vmovss    xmm1, dword [rsi + 4*r8 + 8]
    LONG $0x9979a2c4; WORD $0x874c; BYTE $0x08 // vfmadd132ss    xmm1, xmm0, dword [rdi + 4*r8 + 8]
    LONG $0x0911fac5             // vmovss    dword [rcx], xmm1
    LONG $0x107aa1c4; WORD $0x8644; BYTE $0x0c // vmovss    xmm0, dword [rsi + 4*r8 + 12]
    LONG $0x9971a2c4; WORD $0x8744; BYTE $0x0c // vfmadd132ss    xmm0, xmm1, dword [rdi + 4*r8 + 12]
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x04c08349             // add    r8, 4
    WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	JNE LBB4_19
LBB4_20:
    VZEROUPPER
    RET
